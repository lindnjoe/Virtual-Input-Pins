[gcode_macro LOOKUP_OBJECT]
gcode:
  {% set msg = [] %}
  {% set obj = printer.printer.lookup_object(params.OBJECT|default(None), default=None) %}
  {% if obj %}
    {% for name in obj.__dir__()|sort if not name.startswith('_') %}
      {% set attr = obj|attr(name) %}
      {% if attr is callable %}
        {% set _ = msg.append(name ~ " (callable)") %}
      {% else %}
        {% set _ = msg.append(name ~ " (attribute)") %}
      {% endif %}
    {% endfor %}
    RESPOND MSG="{msg|join('<br>')}"
    {% endif %}
  


[gcode_macro SEARCH]
description: Usage: SEARCH S=<term> [E=<exclude>]
variable_color_path:       "rgb(128,128,128)"
variable_color_key:        "rgb(0,150,255)"
variable_color_val:        "rgb(255,200,50)"
variable_color_typ:        "rgb(180,180,180)"
variable_color_match:      "rgb(255,0,100)"
variable_color_category:   "rgb(50,205,50)"
variable_color_box_bg:     "rgb(20,20,20)"
variable_color_box_border: "rgb(40,40,40)"
variable_font_size:        "0.9em"
variable_max_depth:        5
variable_search_sep:       "°"
variable_long_limit:       100
gcode:
  ; ======================= STYLES & HELPER JINJA MACROS ==========================
  {%- set base_style = "style='font-size:" ~ font_size ~ "; margin-bottom:3px;'" -%}
  {%- set box_style = "style='font-size:" ~ font_size ~ "; background-color:" ~ color_box_bg ~ "; border:1px solid " ~ color_box_border ~ "; border-radius:4px; padding:5px; margin-top:2px;'" -%}
  {% set raw_search = params.S|default("") %}
  {% set sections = {'gcode_commands': [], 'user_macros': [], 'config_templates': [], 'config_settings': [], 'other': []} %}
  
  #---< highlight resutls
  {%- macro _highlight_text(text, terms, color) -%}
      {%- set ns = namespace(output=text|string) -%}
      {%- for term in terms if term and term in ns.output|lower -%}
          {%- set idx = (ns.output|lower).find(term) -%}
          {%- set term_len = term|length -%}
          {%- if idx != -1 -%}
              {%- set ns.output = ns.output[:idx] ~ "<span style='color:" ~ color ~ "'>" ~ ns.output[idx:idx + term_len] ~ "</span>" ~ ns.output[idx + term_len:] -%}
          {%- endif -%}
      {%- endfor -%}
      { ns.output }
  {%- endmacro -%}

  #---< categorization for section sorting/gcode formatting
  {%- macro _get_category(itm) -%}
    {%- set category = 'other' -%}
    {%- if itm.path.startswith(('gcode_macro', 'configfile.settings.gcode_macro')) -%}
      {%- set category = 'user_macros' -%}
    {%- elif itm.path.startswith('gcode.commands') -%}     
      {%- set category = 'gcode_commands' -%}
    {%- elif (type_str == 'str' and ('{%' in itm.obj or '{' in itm.obj)) or itm.path.endswith('.gcode') -%}   
      {% set category = 'config_templates' -%}
    {%- elif itm.path.startswith('configfile.settings') -%}
      {%- set category = 'config_settings' -%}
    {%- endif -%}
    {category}
  {%- endmacro -%}
  #-------------------------------------- RENDERS --------------------------------------
  #---< gcode render
  {%- macro _render_gcode(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set ns_format = namespace(lines=[], indent=0) -%}
      {%- for line in item.obj.split('\n') %}{%- set stripped = line|trim -%}{%- if stripped -%}
          {%- if '{% end' in stripped or '{% el' in stripped %}{% set ns_format.indent = [ns_format.indent - 1, 0]|max %}{% endif -%}
          {%- set _ = ns_format.lines.append('  ' * ns_format.indent ~ line|e) -%}
          {%- if '{% if' in stripped or '{% for' in stripped or '{% el' in stripped %}{% set ns_format.indent = ns_format.indent + 1 %}{% endif -%}
      {%- endif -%}{% endfor -%}
      {%- set gcode = _highlight_text(ns_format.lines|join('<br>'), include_terms, color_match) -%}
      {%- set summary = "<summary>" ~ h_path ~ "</summary>" -%}
      {%- set details = "<div " ~ box_style ~ "><div style='white-space:pre; font-family:monospace; overflow-x:auto;'>" ~ gcode ~ "</div></div>" -%}
      { "<details " ~ base_style ~ ">" ~ summary ~ details ~ "</details>" }
  {%- endmacro -%}

  #---< description/misc render
  {%- macro _render_long_string(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set safe_val = item.obj|string|e|replace('\r', '')|replace('\n', '<br>') -%}
      {%- set h_val = _highlight_text(safe_val, include_terms, color_match) -%}
      {%- set summary = "<summary>" ~ h_path ~ "</summary>" -%}
      {%- set details = "<div " ~ box_style ~ ">" ~ h_val ~ "</div>" -%}
      { "<details " ~ base_style ~ ">" ~ summary ~ details ~ "</details>" }
  {%- endmacro -%}

  #---< simple value (int, none, float etc...) render
  {%- macro _render_primitive(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set safe_val_str = item.obj|string|e|replace('\r', '')|replace('\n', '<br>') -%}
      {%- set val = _highlight_text(safe_val_str, include_terms, color_match) -%}
      {%- set h_type = _highlight_text("(" ~ item.obj.__class__.__name__ ~ ")", include_terms, color_typ) -%}
      { "<div " ~ base_style ~ ">" ~ h_path ~ ": <span style='color:" ~ color_val ~ "'>" ~ val ~ "</span> <span style='color:"~color_typ~"'>" ~ h_type ~ "</span></div>" }
  {%- endmacro -%}
  
  #---< mappables (dict, list....) render
  {%- macro _render_mapping(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set children = [] -%}
      {%- if item.obj is mapping and item.obj.items is defined -%}
          {%- for key, value in item.obj.items() | sort(attribute=0) -%}
              {%- set safe_val = value|string|e|replace('\r','')|replace('\n','<br>') -%}
              {%- if value is mapping or (value is sequence and value is not string) -%}
                  {%- set child_type = "(" ~ value.__class__.__name__ ~ ")" -%}
                  {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                              key ~ ":</span> <span style='color:" ~ color_typ ~ "'>" ~
                                              child_type ~ "</span></div>") -%}
              {%- else -%}
                  {%- set h_val = _highlight_text(safe_val, include_terms, color_match) -%}
                  {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                              key ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~
                                              h_val ~ "</span></div>") -%}
              {%- endif -%}
          {%- endfor -%}
      {%- else -%} #---< dunno if this is even needed render.
          {%- for key in item.obj.__dir__() | sort -%}
              {%- if not key.startswith('__') -%}
                  {%- set value = item.obj | attr(key) -%}
                  {%- if value is not callable and value is not none -%}
                      {%- set safe_val = value|string|e|replace('\r','')|replace('\n','<br>') -%}
                      {%- if value is mapping or (value is sequence and value is not string) -%}
                          {%- set child_type = "(" ~ value.__class__.__name__ ~ ")" -%}
                          {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                                      key ~ ":</span> <span style='color:" ~ color_typ ~ "'>" ~
                                                      child_type ~ "</span></div>") -%}
                      {%- else -%}
                          {%- set h_val = _highlight_text(safe_val, include_terms, color_match) -%}
                          {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                                      key ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~
                                                      h_val ~ "</span></div>") -%}
                      {%- endif -%}
                  {%- endif -%}
              {%- endif -%}
          {%- endfor -%}
      {%- endif -%}
      {%- set summary = "<summary>" ~ h_path ~
                        " <span style='color:" ~ color_typ ~ "'>(" ~
                        item.obj.__class__.__name__ ~ ")</span></summary>" -%}
      {%- set details = "<div " ~ box_style ~ ">" ~ (children|join) ~ "</div>" -%}
      { "<details " ~ base_style ~ ">" ~ summary ~ details ~ "</details>" }
  {%- endmacro -%}
  
  #-------------------------- MAIN RENDER DISPATCHER ---------------------------
  {%- macro _render_result(item) -%}
      {%- set type_str = item.obj.__class__.__name__ -%}
      {%- if type_str == 'str' and ('{%' in item.obj or '{' in item.obj) -%}{ _render_gcode(item) }
      {%- elif item.obj is mapping -%}{ _render_mapping(item) }
      {%- elif type_str == 'str' and item.obj|length > long_limit|int -%}{ _render_long_string(item) }
      {%- else -%}{ _render_primitive(item) }{%- endif -%}
  {%- endmacro -%}

  #---------------------------- ACTUAL SERACH --------------------------  
  {% if not raw_search %}
      { action_respond_info("Usage: SEARCH_PRINTER S=<terms> [E=<exclude_terms>]") }
  {% else %}
      {% set include_terms = raw_search.lower().split(search_sep) %}
      {% set exclude_str = params.E|default("") %}
      {% set exclude_terms = (exclude_str|lower).split(search_sep) %}
      {% set depth_limit = params.MAX_DEPTH|default(max_depth)|int %}
      {% set ns = namespace(queue=[], results=[]) %}
      {% for k in printer %}{% set _ = ns.queue.append({'path': k, 'obj': printer[k], 'depth': 1}) %}{% endfor %}
      
      { action_respond_info("Starting search for '" ~ raw_search|e ~ "'...") }
      {% for i in range(40000) if ns.queue %}
          {% set item = ns.queue.pop(0) %}
          {% set val_str = item.obj|string if not (item.obj is mapping) else "" %}
          {% set combined = (item.path ~ " " ~ val_str)|lower %}
          {% set keep = namespace(v=True) %}
          
          {% for term in include_terms if term and term not in combined %}{% set keep.v = False %}{% endfor %}
          {% for term in exclude_terms if term and term in combined %}    {% set keep.v = False %}{% endfor %}
          {% if 'configfile.config' in item.path %}{% set keep.v = False %}{% endif %} #---< duplicate but all values are strings lol
          
          {% if keep.v %}
              {% set _ = ns.results.append({'path': item.path, 'html': _render_result(item), 'category': _get_category(item)}) %}
          #---< dont keep? keep searching into it.
          {% elif item.depth < depth_limit %}
              {% if item.obj is mapping %} #---< mapping
                {% for k in item.obj %}{% set _ = ns.queue.append({'path': item.path ~ "." ~ k, 'obj': item.obj[k], 'depth': item.depth + 1}) %}{% endfor %}
              {% elif item.obj is sequence and item.obj is not string %} #---< or list?
                {% for i in range(item.obj|length) %}{% set _ = ns.queue.append({'path': item.path ~ "[" ~ i ~ "]", 'obj': item.obj[i], 'depth': item.depth + 1}) %}{% endfor %}
              {% endif %}
          {% endif %}
      {% endfor %}

      #---------------------------- DISPLAY SEARCH --------------------------  
      {% if not ns.results %}
          RESPOND MSG="No matches found for '{raw_search|e}'"
      {% else %}
          {% for item in ns.results|sort(attribute='path') %}
            {% set _ = sections[item.category].append(item.html) %}
          {% endfor %}
          
          {% set category_map = [
              ('G-Code Commands / Help',  sections.gcode_commands), 
              ('User-Defined Macros',     sections.user_macros),
              ('Config G-Code Templates', sections.config_templates),
              ('Configuration Settings',  sections.config_settings), 
              ('Live State & Other',      sections.other)] %}
          
          {% set output = [] %}
          {% for name, items in category_map if items %}
              {% set summary = "<summary style='color:" ~ color_category ~ "; font-weight:bold;'>" ~ name ~ " (" ~ items|length ~ " matches)</summary>" %}
              {% set _ = output.append("<details>" ~ summary ~ (items|join) ~ "</details>") %}
          {% endfor %}
          RESPOND MSG="Found {ns.results|length} matches for '{raw_search|e}':{output|join}"
      {% endif %}
  {% endif %}

[gcode_macro MEGA_DUMP]
description: Up to N-level BFS. If container path matches, show (dict) and skip inside. [S=foo°bar°stack] will return results containing foo, and bar, and stack.
variable_color_path:    "rgb(128,128,128)"  # light gary
variable_color_key:     "rgb(0,150,255)"    # blue
variable_color_val:     "rgb(255,200,50)"   # yellow
variable_color_typ:     "rgb(180,180,180)"  # whiteish
variable_color_match:   "rgb(255,0,100)"    # magenta
variable_long_limit:    "120"                 # characters before cutoff
variable_max_depth:     "5"                   # 5 levels (3-4 should work too)
gcode:
    {% set raw_s = params.S|default("")|string %}
    {% set search_lc = raw_s|lower %}
    {% set terms = search_lc.split("°") %}

    #{% set nl = '\u0026\u0023\u0031\u0030\u003b' %}
    {% set nl = '<br>' %}

    {% set ns = namespace(lines=[], total=0, stack=[], done=False, doneAtLine="None", val="") %}

    {% for top_key in printer %}
        {% set item = [top_key|string, printer[top_key], 1] %}
        {% set ns.stack = ns.stack + [ item ] %}
    {% endfor %}

    {% for i in range(99999) %}
        {% if ns.stack|length == 0 %}
            {% set ns.done = 1 %}
        {% else %}
            {% set popped = ns.stack[ ns.stack|length -1 ] %}
            {% set ns.stack = ns.stack[:ns.stack|length -1] %}
            {% set cur_path = popped[0] %}
            {% set cur_obj  = popped[1] %}
            {% set depth    = popped[2] %}
            {% set typ_str  = cur_obj.__class__.__name__|string %}

            {% set val_str = "" %}
            {% if typ_str not in ["dict", "list", "tuple", "set"] %}
                {% set val_str = cur_obj|string %}
            {% endif %}

            {% set combined = cur_path|lower %}
            {% if val_str %}
                {% set combined = combined ~ " " ~ val_str|lower ~ typ_str|lower %}
            {% endif %}

            {% set match_ns = namespace(keep=true) %}
            {% for t in terms %}
                {% if t|length > 0 and not (t in combined) %}
                    {% set match_ns.keep = false %}
                {% endif %}
            {% endfor %}
            
            {% if 'configfile.config' in cur_path|lower %}
                {% set match_ns.keep = false %}
            {% endif %}

            {% if match_ns.keep %}
                {% set ns.total = ns.total + 1 %}
                {% set ns.final_path = cur_path %}
                {% set ns.final_val  = val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set ns.final_typ  = "(" ~ typ_str ~ ")" %}
                {% set segments = cur_path.split(".") %}
                {% set ns.final_key = segments[segments|length -1] %}

                # |replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;")

                {% set hover_path = cur_path|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set hover = "printer." ~ hover_path %}

                # ------------------------------------------------------------------ #
                #  Two-pass highlighter: avoids tuching characters that already
                #  live inside earlier span tags.
                #  - terms  - list split from the S=… parameter
                #  - color_match  – your highlight RGB variale
                #  - ns.final_path / key / val / typ  – the strings we want to color
                # ------------------------------------------------------------------ #

                {% set mask = namespace(path = ns.final_path, key  = ns.final_key, val  = ns.final_val, typ  = ns.final_typ) %}

                {% for t in terms %}
                    {% if t|length > 0 %}
                        {% set term = t|lower %}
             
                        {% set lower_path = mask.path|lower %}
                        {% set lower_key  = mask.key|lower %}
                        {% set lower_val  = mask.val|lower %}
                        {% set lower_typ  = mask.typ|lower %}

                        # ---- path ----
                        {% set idx = lower_path.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.path[idx:idx + term|length] %}
                            {% set mask.path = mask.path[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>" ~ mask.path[idx + term|length:] %}
                        {% endif %}
                        # ---- key ----
                        {% set idx = lower_key.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.key[idx:idx + term|length] %}
                            {% set mask.key = mask.key[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>" ~ mask.key[idx + term|length:] %}
                        {% endif %}
                        # ---- val ----
                        {% set idx = lower_val.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.val[idx:idx + term|length] %}
                            {% set mask.val = mask.val[:idx]  ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>"  ~ mask.val[idx + term|length:] %}
                        {% endif %}
                        # ---- typ ----
                        {% set idx = lower_typ.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.typ[idx:idx + term|length] %}
                            {% set mask.typ = mask.typ[:idx]  ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>"  ~ mask.typ[idx + term|length:] %}
                        {% endif %}
                    {% endif %}
                {% endfor %}

                {% set ns.final_path = mask.path %}
                {% set ns.final_key  = mask.key  %}
                {% set ns.final_val  = mask.val  %}
                {% set ns.final_typ  = mask.typ  %}

                {% if typ_str in ["dict", "list", "tuple", "set"] and cur_obj|length > 0 %}
                    {% set summary = "<summary><span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {<span style='color:" ~ color_val ~ "'>(" ~ typ_str ~ ")</span>}</summary>" %}
                    {% set children = [] %}
                    {% set show_keys = cur_obj.keys()|list if typ_str == "dict" else range(cur_obj|length) %}
                    {% for k in show_keys[:10] %}
                        {% set val_type = cur_obj[k].__class__.__name__ %}
                        {% if val_type not in ["dict", "list", "tuple", "set"] %}
                            {% set val_str = cur_obj[k]|string %}
                            {% if val_str|length > 50 %}
                                {% set val_str = val_str[:47] ~ "..." %}
                            {% endif %}
                            {% set child_line = "<div style='margin-left:1em'><span style='color:" ~ color_key ~ "'>" ~ k|string ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~ val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") ~ "</span> <span style='color:" ~ color_typ ~ "'>(" ~ val_type ~ ")</span></div>" %}
                            {% set _ = children.append(child_line) %}
                        {% endif %}
                    {% endfor %}
                    {% set html = "<span style='display:inline-block'><details title='" ~ hover ~ "'>" ~ summary ~ children|join() ~ "</details></span>" %} # children|join(nl)
                    {% set ns.lines = ns.lines + [html] %}
                {% else %}
                    # -------------------------------------------------------------------- #
                    #  BUILD PRETTY INDENT
                    #  – ident at if else for starts
                    #  – reduce indent at ending tags
                    # -------------------------------------------------------------------- #
                    {% set raw_lines = ns.final_val.split('\n') %}
                    {% set ns_gcode = namespace(dent = 0, prev_empty = false, unclosed = false) %}
                    {% set html_lines = [] %}

                    {% for ln in raw_lines %}
                        {% set t = ln|trim %}

                        # 1 - close or else/elif → pop
                        {% if '{% end' in t or '{% el' in t %}
                            {% set ns_gcode.dent = [ns_gcode.dent - 1, 0]|max %}
                        {% endif %}

                        # 2 - render at current indent
                        {% set pad = '&nbsp;&nbsp;' * ns_gcode.dent %}

                        # 2b - dont spam newlines where klipper added newline for a removed comment.
                        {% if t == '' %}
                            {% if not ns_gcode.prev_empty %}
                                {% set _ = html_lines.append(nl) %}
                                {% set ns_gcode.prev_empty = true %}
                            {% endif %}
                        {% else %}
                            {% set _ = html_lines.append(pad ~ t ~ nl) %}
                            {% set ns_gcode.prev_empty = false %}
                        {% endif %}

                        # 2c - if it ends with a pure closer, inject blank line
                        {% if (t.endswith('{% endif %}') or t.endswith('{% endfor %}')) and (t != ('{% endif %}' or '{% endfor %}')) and not ns_gcode.prev_empty %}
                            {% set _ = html_lines.append(nl) %}
                        {% endif %}

                        # 3 - opener or else/elif → push
                        {% if '{% if' in t or '{% for' in t or '{% el' in t %}
                            {% set ns_gcode.dent = ns_gcode.dent + 1 %}
                        {% endif %}
                    {% endfor %}

                    # 4 - Re-join, wrap in your summary/details logic as before 
                    {% set plain_full = html_lines|join('') %}

                    # -------------------------------------------------------------------- #
                    #  DISPLAY WITH SUMMARY
                    #  – if the string is short  → keep the old one-liner
                    #  – if the string is long   → show preview + expandable details
                    # -------------------------------------------------------------------- #
                    {% if plain_full|length <= long_limit|int and '\n' not in plain_full %}
                        # ── SHORT STRING ─────────────────────────── #
                        {% set line = "<span title='" ~ hover ~ "'>" ~
                            "<span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {" ~
                            "<span style='color:" ~ color_key  ~ "'>" ~ ns.final_key  ~ "</span>: " ~
                            "<span style='color:" ~ color_val  ~ "'>" ~ plain_full|replace(nl, '') ~ "</span> " ~
                            "<span style='color:" ~ color_typ  ~ "'>" ~ ns.final_typ   ~ "</span>}" ~
                            "</span>" %}
                        {% set ns.lines = ns.lines + [ line ] %}

                    {% else %}
                        # ── LONG STRING → build preview around 1st highlight + details─── #

                        # find earliest highlighted <span> placeholder (§n§ already expanded) #
                        {% set first_idx = plain_full.find(color_match) %}
                        {% if first_idx == -1 %} {% set first_idx = 0 %} {% endif %}

                        {% set preview_start = [first_idx - 35, 0]|max %}
                        {% set preview_end = preview_start + 75|int %}
                        {% set preview = plain_full[preview_start:preview_end] %}

                        # --- add ... if not cut at start
                        {% if preview_start > 0 %} {% set preview = "…" ~ preview %} {% endif %}
                        # --- add ... if not cut at end
                        {% if preview_end < plain_full|length %} {% set preview = preview ~ "…" %} {% endif %}

                        # summary line (preview) #
                        {% set summary = "<summary><span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~
                            "</span> {" ~
                            "<span style='color:" ~ color_key ~ "'>" ~ ns.final_key ~ "</span>: " ~
                            "<span style='color:" ~ color_val ~ "'>" ~ preview|replace(nl, '') ~ "</span> " ~
                            "<span style='color:" ~ color_typ ~ "'>" ~ ns.final_typ ~ "</span>}</summary>" %}

                        # full content shown after expanding #
                        {% set details = "<div style='margin-left:1em; white-space:pre; overflow-x:auto;'>" ~ plain_full ~ "</div>" %}
                        {% set html = "<span style='display:inline-block'><details title='" ~ hover ~ "'>" ~ summary ~ details ~ "</details></span>" %}

                        {% set ns.lines = ns.lines + [ html ] %}
                    {% endif %}
                {% endif %}
            # -------------------------------------------------------------------- #
            #  SEARCH FURTHER
            #  - if type contains contents, go further until max_depth is hit.
            #  - adds to the list the for loop accesses.
            # -------------------------------------------------------------------- #
            {% elif typ_str == "dict" and depth < max_depth|int %}
                {% for child_key in cur_obj %}
                    {% set next = cur_path ~ "." ~ child_key|string %}
                    {% set entry = [next, cur_obj[child_key], depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                {% endfor %}
            {% elif typ_str in ["list", "tuple", "set"] and depth < max_depth|int %}
                {% set idx = 0 %}
                {% for val in cur_obj %}
                    {% set next = cur_path ~ "[" ~ idx|string ~ "]" %}
                    {% set entry = [next, val, depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                    {% set idx = idx + 1 %}
                {% endfor %}
            {% endif %}
            {% if ns.done|default(false) and ns.doneAtLine == "None" %}
                {% set ns.doneAtLine=loop.index|string %}
                RESPOND MSG="{loop.index|string}"
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if ns.lines|length == 0 %}
        {% set safe = raw_s|replace("'", "&apos;") %}
        RESPOND MSG="No matches found for '{safe}'"
    {% else %}
        # split into config vs everything else 
        {% set cfg = [] %}
        {% set oth = [] %}
        {% for line in ns.lines %}
            {% if "<details title='printer.configfile.settings" in line or "<span title='printer.configfile.settings" in line %}
                {% set _ = cfg.append(line) %}
            {% else %}
                {% set _ = oth.append(line) %}
            {% endif %}
        {% endfor %}

        # build the two summaries 
        {% if oth %} {% set summary_oth = "<details><summary>others (" ~ oth|length|string ~ " matches)</summary>" ~ (oth|join(nl)) ~ "</details>" %} {% endif %}
        {% if cfg %} {% set summary_cfg = "<details><summary>config (" ~ cfg|length|string ~ " matches)</summary>" ~ (cfg|join(nl)) ~ "</details>" %} {% endif %}

        # send them both 
        {% set msg = "Found " ~ ns.lines|length|string ~ " matches for " ~ raw_s|replace("'", "&apos;") ~ ":" ~ summary_oth|replace('\n', nl)|replace('\r','') ~ summary_cfg|replace('\n', nl)|replace('\r','') %}
        RESPOND MSG="{msg}"
    {% endif %}


[gcode_macro DUMP_VARIABLES]
description: Dump all values but can filter with NAME. e.g. DUMP_VARIABLES NAME=gcode_move. It can also filter by value VALUE
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
description: Dump the value of an object inside printer object. Use dot-notation, e.g. GET_VARIABLE NAME=gcode_move.gcode_position
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}