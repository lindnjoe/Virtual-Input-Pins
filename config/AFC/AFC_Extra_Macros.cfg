[gcode_macro M109]
rename_existing: M109.9999
description: [T<index>] [S<temperature>] [D<Deadband>]
  Set tool temperature and wait.
  T= Tool number [optional]. If this parameter is not provided, the current tool is used.
  S= Target temperature
  D= Dead-band, allows the temperature variance +/- the deadband
variable_default_deadband: 20.0
gcode:
    {% set s = params.S|float %}
    {% set deadband = default_deadband|float %}
    {% if params.D is defined %}
        {% set deadband = params.D|float %}
    {% endif %}
    {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
    {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
    {% set extruder = printer[tool].extruder %}

    SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
    {% if s > 0 %}
        TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={s-(deadband/2)} MAXIMUM={s+(deadband/2)}   ; Wait for hotend temp (within D degrees)
    {% endif %}

[axiscope]
pin: PB15                # Endstop pin
zswitch_x_pos: 329.3     # REQUIRED - X position of the endstop switch
zswitch_y_pos: -9.0     # REQUIRED - Y position of the endstop switch
zswitch_z_pos: 3.8        # REQUIRED - Z position + some clearance of the endstop switch
lift_z: 2                 # OPTIONAL - Amount to lift Z before moving (default: 1)
move_speed: 60            # OPTIONAL - XY movement speed in mm/s (default: 60)
z_move_speed: 10          # OPTIONAL - Z movement speed in mm/s (default: 10)
start_gcode: M118 Starting calibration G28 -> QGL -> G28Z
             G28
             QUAD_GANTRY_LEVEL
             G28 Z
             G0 X175 Y175 Z30 F3000   # Move to center @ focal length of camera Z=30
before_pickup_gcode: M118 Something Could be Done here
after_pickup_gcode: M118 NozzleScrub
                    M109 S150
                    #CLEAN_NOZZLE
                    AFC_BRUSH
                    G0 X175 Y175 Z30
finish_gcode: M118 Calibration complete
              T0


[gcode_macro PRINT_END]
gcode:
  _TOOLCHANGER_PRINT_END_START {rawparams}
  STOP_TOOL_PROBE_CRASH_DETECTION
  M400                           ; wait for buffer to clear
  CLEAR_PAUSE

  M220 S100
  M221 S100
 # SET_PRESSURE_ADVANCE ADVANCE=0
  {% if printer.extruder.temperature >= 180 %}
    M83
    G91
    G1 E-2 F2400                   ; retract filament
    G1 E-2 Z5 F2400
  {% endif %}
  M82
  G90

  SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0

  TURN_OFF_HEATERS
  _TOOLCHANGER_TURN_OFF_FANS     ; turn off fan
  M140 S0                        ; turn off bed

  _TOOLCHANGER_PRINT_END_END {rawparams}
  M117 Print done



[gcode_macro TEST_ENDSTOP_REPEATABILITY]
variable_cache: {}
gcode:
    {% set axis    = params.get('AXIS','')|upper %}
    {% set cycles  = params.get('CYCLES', 10)|int %}
    {% set retract = params.get('RETRACT', 5)|float %}

    {% if axis not in ['X','Y','Z'] %}
        { action_respond_info("AXIS must be X, Y or Z") }
    {% elif cycles < 2 %}
        { action_respond_info("CYCLES must be ≥ 2") }
    {% else %}
        {% set step_name = 'stepper_' ~ axis|lower %}
        SET_GCODE_VARIABLE MACRO=TEST_ENDSTOP_REPEATABILITY VARIABLE=cache VALUE="{ { 'name': step_name, 'l': [] } }"
        {% set sign = '-' if printer.configfile.settings[step_name].get('homing_positive_dir', False) else '' %}
        { action_respond_info("Running test on %s-axis — %d cycles, retract %.2f mm" % (axis, cycles, retract)) }
        {% for i in range(cycles) %}
            G28 {axis}
            M400
            _TEST_ENDSTOP_REPEATABILITY RECORD={axis}
            G91
            G0 {axis}{sign}{retract}      ; relative retract
            G90
            M400
            G4 P100
        {% endfor %}
        _TEST_ENDSTOP_REPEATABILITY PROCESS={axis}
    {% endif %}

[gcode_macro _TEST_ENDSTOP_REPEATABILITY]
gcode:
    {% set cache = printer['gcode_macro TEST_ENDSTOP_REPEATABILITY'].cache %}
    {% if 'RECORD' in params %}
        {% set kin = printer.printer.lookup_object('toolhead').get_kinematics() %}
        {% set ns = namespace(stepper_obj=None) %}
        {% for s in kin.get_steppers() if s.get_name() == cache.name and not ns.stepper_obj %}
                {% set ns.stepper_obj = s %}
        {% endfor %}
        {% set _ = cache.l.append(ns.stepper_obj.get_mcu_position()) %}
        SET_GCODE_VARIABLE MACRO=TEST_ENDSTOP_REPEATABILITY VARIABLE=cache VALUE="{ cache }"
    {% elif 'PROCESS' in params %}
        {% set n = cache.l|length %}
        {% if n < 2 %}
            { action_respond_info("Not enough samples — got %d, need at least 2." % n) }
        {% else %}
            #---< steps/mm
            {% set cfg           = printer.configfile.settings[cache.name] %}
            {% set steps_per_rev = cfg.full_steps_per_rotation|float * cfg.microsteps|float %}
            {% set step_dist     = cfg.rotation_distance|float / steps_per_rev %}
            #---< min|max range
            {% set range_s  = cache.l|max - cache.l|min %}
            {% set range_mm = range_s * step_dist %}
            #---< std dev
            {% set ns       = namespace(ssd=0.0) %}
            {% set avg_s    = (cache.l|sum) / n %}
            {% for v in cache.l %}{% set ns.ssd = ns.ssd + (v - avg_s)**2 %}{% endfor %}
            {% set std_s    = (ns.ssd / n)**0.5 %}
            {% set std_mm   = std_s  * step_dist %}
            #---< report
            {% set _ = action_respond_info( [
                "="*40,
                "Endstop Repeatability Results — %s-axis" % cache.name|replace('stepper_', ''),
                "Cycles Run         : %d"      % n,
                "-"*20,
                "Range (Max-Min)    : %.6f mm  (%d steps)" % (range_mm, range_s),
                "Standard Deviation : %.6f mm  (%.2f steps)" % (std_mm, std_s),
                "-"*20,
                "Raw MCU steps      : %s" % cache.l,
                "="*40 ]|join('\n') ) %}
        {% endif %}
    {% endif %}


[gcode_macro _TOOLCHANGER_VARS]
variable_fan_speed: 255
gcode:

[gcode_macro _TOOL_DROPOFF]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set safe_y = tool.params_safe_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool['params_dock_' + tool.params_dock_type + '_path'] + [{'f':0.5}] + tool['params_changer_' + tool.params_changer_type + '_path'] %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set cur_z = printer.toolhead.position[2]|float %}
  G90
  ; Move 1 mm up to avoid crashing into things
  G0 Z{ [cur_z+1.0, max_z]|min } F{fast}    
  #   ##############  Move up to the dock  ##############    
  ROUNDED_G0 Y={safe_y} D=20 F={fast}
  ROUNDED_G0 X={x} D=150 F={fast}
  ROUNDED_G0 Z={z + path[0].get('z', 0)|float} D=20 F={fast}
  ROUNDED_G0 Y={y + path[0].get('y', 0)|float} X={x + path[0].get('x', 0)|float} D=0 F={fast}
  STOP_TOOL_PROBE_CRASH_DETECTION
  #  ############## Run the path ##############
  {% for pos in path %}
    G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_VARS VARIABLE=fan_speed VALUE={ printer[tool.fan].speed * 255|default(0)|int }
  M106 S0 T{tn}
  
   ## Return to safe Y if no pickup_tool
    {% if pickup_tool is none %}
      G0 Y{tool.params_safe_y} F{fast}
    {% endif %}


[gcode_macro AFC_PARK]
;rename_existing: AFC_PARK1
gcode:
  UNSELECT_TOOL
  

[gcode_macro LOAD_NOZZLE]

gcode:
  {% set lane = printer['AFC'].current_load %}

  {% if lane in ['lane0', 'lane1', 'lane2', 'lane3'] %}
    AFC_POOP
    AFC_KICK
  
  {% else %}
    {% set msg = "Lane loaded from AMS " ~ lane %}
    M117 {msg}
    RESPOND PREFIX=AFC MSG="{msg}"
  {% endif %}

[gcode_macro AFC_MAP_RESET]
gcode:
 RESET_AFC_MAPPING


[gcode_macro AFC1]
gcode:
  {% set lane = printer['AFC'].next_lane %}

  {% if lane in ['lane0', 'lane1', 'lane2', 'lane3'] %}
    AFC
      
  {% elif lane == 'lane4' %}
   # SAFE_UNLOAD_FILAMENT1
    #CUT_FILAMENT1

  {% elif lane == 'lane6' %}
    #SAFE_UNLOAD_FILAMENT1
    #CUT_FILAMENT1

  {% elif lane == 'lane7' %}
    #SAFE_UNLOAD_FILAMENT1
   # CUT_FILAMENT1

  {% elif lane == 'lane8' %}
    #SAFE_UNLOAD_FILAMENT1
   # CUT_FILAMENT1 

  {% elif lane == 'lane5' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2

  {% elif lane == 'lane9' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2

  {% elif lane == 'lane10' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2

  {% elif lane == 'lane11' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2    
    
  {% else %}
    {% set msg = "Invalid lane/tool in AFC: " ~ lane %}
    M117 {msg}
    RESPOND PREFIX=AFC1 MSG="{msg}"
  {% endif %}



[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    # If QGL is not applied, first run a course calibration
    {% if printer.quad_gantry_level.applied == False %}
        _QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1.0
    {% endif %}
    # then perform fine QGL down to desired spec
    # this has to be a separate macro call so the results of the above call will be visible!
    _FINE_QUAD_GANTRY_LEVEL

[gcode_macro _FINE_QUAD_GANTRY_LEVEL]
gcode:
    {% if printer.quad_gantry_level.applied == True %}
        # go for full quality at reduced probing height
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=1.0  # <- set your preferred probing height here!
    {% else %}
        # This should never happen, just perform the full calibration using the defaults
        {action_respond_info("Fine QGL called without calling course QGL first!")}
        _QUAD_GANTRY_LEVEL  # default behavior, no speedup
    {% endif %}